spring.application.name=paymybuddy

#changement si conflit.
#server.port = 9090

#Tomcat n'interrompra pas la connexion pour des requetes mal formees.
server.tomcat.reject-illegal-header=false
# Permet d'accepter des requetes partielles sans generer d'erreur.
server.tomcat.max-swallow-size=-1

#pour definir le niveau par defaut.
logging.level.root=info
#logging.level.root=debug

#appliquer a toutes les classes de mon package.
#	info : Affiche les messages de niveau info, warn, et error.
#	error : Affiche uniquement les messages de niveau error.
#	debug : Affiche les messages de tous les niveaux : debug, info, warn, et error.
#logging.level.com.cordierlaurent.paymybuddy=info
#logging.level.com.cordierlaurent.paymybuddy=error
logging.level.com.cordierlaurent.paymybuddy=debug

#Reduit la verbosite des bibliotheques Apache (dont Tomcat)
#logging.level.org.apache=warn
logging.level.org.apache=info

# BDD ..........................................................................
# URL de connexion a MySQL
# jdbc:mysql : le protocole utilise.
# ATTENTION NE SURTOUT PAS UTILISER SPRING_DATASOURCE_URL, SPRING_DATASOURCE_USERNAME, SPRING_DATASOURCE_PASSWORD comme variables d'environnement personnalisees car elles sont prioritaires.  
# ++++ RELANCER ECLIPSE SI CHANGEMENT.
spring.datasource.url=${MY_SPRING_DATASOURCE_URL}
# Identifiants MySQL
spring.datasource.username=${MY_SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${MY_SPRING_DATASOURCE_PASSWORD}
# a desactiver pour eviter les problemes de performances.
spring.jpa.open-in-view=false
# pour activer les logs SQL de Hibernate pour voir la requete generee :
# affiche les requetes SQL generees par Hibernate directement dans la console.
#spring.jpa.show-sql=true
# formate les requetes SQL affichees dans la console pour une meilleure lisibilite.
#spring.jpa.properties.hibernate.format_sql=true
# Active les logs de Hibernate pour afficher les requetes SQL executees
#logging.level.org.hibernate.SQL=DEBUG
# Affiche les valeurs des parametres passees aux requetes SQL de Hibernate.
#logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
# pour empecher Hibernate de recreer les tables : Hibernate ne modifie pas la base mais verifie si la structure correspond.
spring.jpa.hibernate.ddl-auto=validate
logging.level.com.zaxxer.hikari=DEBUG
# Pour s'assurer que Hikari prend en compte les changements
#spring.datasource.type=com.zaxxer.hikari.HikariDataSource
#spring.datasource.hikari.jdbc-url=${spring.datasource.url}
#spring.datasource.hikari.username=${spring.datasource.username}
#spring.datasource.hikari.password=${spring.datasource.password}
#sinon, probleme de decalage hoaire.
spring.jpa.properties.hibernate.jdbc.time_zone=Europe/Paris



# Thymeleaf......................................................................
# ATTENTION : a supprimer quand j utiliserai Thymeleaf (pour eviter warning pour le moment)
spring.thymeleaf.check-template-location=false
# en dev uniquement => si modification d'un template, pas besoin de relancer l'application.
spring.thymeleaf.cache=false

 